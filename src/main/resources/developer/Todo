Todo:
    - calculation of offset (beq/bne) ?

Done:
    - calculation of offset (beq/bne): 
        current PC address (address of beq/bne)
        +   4
        +   sign_extended offset << 2

        (offset is the address of target instruction)


-------------
Todo: 
    - check if parsing different types of argument works. Possible to write junit tests for this part.
    - rework MAIN, because argument types loading has changed.

Done:
    - main is now correctly displaying arg types
    - arguments and reference ("#2") are now stored


Notes:
    - there is a question: how to represent constant values in fields ? Answer: Just represent constant values as strings and everything that isn't a constant begins with "#" 


-------------
Todo: 
    - Test data functionality. If a number higher than number of bits of that data object gets properly cut by the mask.
       
Done:
    - tests have been written and successfully tested. Additional tests have been created


-------------
Todo:
    - parse user input (instruction) and assemble it
    - handle labels when assembling
    - think through the assembledInstruction class. What do we actually need to have fully supported assembled instruction ?

Notes: 
    - operation in component object should be (probably) tied to control signals in code (hard coded). That's
      why there is "signalToOperation" property, tying operation to a specific signal

    - there is no benefit in dividing the signals into separate list of inputs. Some traditional outputs of 
      components are signals for other components, so it's hard to define the borderline case - where does an
      output "transform" into a signal ?

-------------
Notes: While doing the control unit class I've stumbled upon a possible logical problem - When an instruction has opcode 0, 
        it is an arithmetic instruction. Operation, that should be done, is specified by "func" field from instruction. 
        Shouldn't be the mapping of func to operation done in control unit ? 

-------------
Notes: LatchRegister has (in cpu.json) input/output data defined differently. Each input maps to a specific output(s). That means writing 

        in:  { "number" : 32" }
        out: { "number" : {"base": 20, "exponent": 12 } }
        
       means, that input 'number' maps to two outputs 'base' and 'exponent'. The input/output mapping can be, of course, done 1:1 like this

       in:  { "signal": 2 }
       out: { "signal: { "description": 2 } }

       where in this example input 'signal' maps to the same-sized output 'description'.