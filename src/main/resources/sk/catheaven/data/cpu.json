{
    "components" : [
        { "label": "PC",
            "gui": {
               "x": 15,
               "y": 95,
               "width": 25,
               "height": 30
            },
            "type": "PC",
            "bitSize": 32,
            "desc": "Adds 4 to the value of input A." 
        },
        { "label": "AF",
            "gui": {
               "x": 25,
               "y": 110,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 32,
            "out": [
                { "label": "address", "bitSize": "32" }
            ],
            "desc": "Forks address from PC."
        },
        { "label": "CONST_ADDER",
            "gui": {
               "x": 40,
               "y": 120,
               "width": 10,
               "height": 45
            },
            "type": "ConstAdder", 
            "input": { "label": "address", "bitSize": 32 },
            "output": 32,
            "const": 4,  
            "desc": "Adds 4 to the value of input A."
        },
        { "label": "NAF",
            "gui": {
               "x": 55,
               "y": 142,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 32,
            "out": [
                { "label": "newAddress", "bitSize": "32" }
            ],
            "desc": "Forks new address from constAdder to branch and latch register."
        },  
        { "label": "BRANCH_MUX",
            "gui": {
               "x": 275,
               "y": 170,
               "width": 5,
               "height": 20
            },
            "type": "MUX", 
            "inputA": { "label": "newAddress", "bitSize": 32 },
            "inputB": { "label": "branchAddress", "bitSize": 32 },
            "output": 32,
            "selector": { "label": "branchSignal", "bitSize": 1 },
            "desc": "Chooses from next address or calculated address in case of branching."
        },      
        { "label": "I_MEM",
            "gui": {
               "x": 35,
               "y": 87,
               "width": 20,
               "height": 40
            },
            "type": "InstructionMemory",
            "input": 32, 
            "output": 32
        },
        
       
        
        { "label": "IF_ID",
            "gui": {
               "x": 60,
               "y": 35,
               "width": 10,
               "height": 130
            },
            "type": "LatchRegister",
            "in": {
                "newAddress": 32,
                "iCode": 32
            },
            "out": {
                "newAddress": { "newAddress" : "32" },
                "iCode": {
                    "iCode": "32",
                    "rs" : "6-27",
                    "rt" : "11-27",
                    "rd" : "16-27",
                    "immediateValue": "16-16"
                }
            },
            "bubble": { "label": "bubble", "bitSize": 1 }, 
            "desc": "Latch register between Fetch and Decode phase" 
        },  
        { "label": "CU",
            "gui": {
               "x": 110,
               "y": 145,
               "width": 15,
               "height": 30
            },
            "type": "ControlUnit",
            "in" : 32,
            "opCodeCut": "0-26",
            "funcCut": "27-27",
            "funcDependant": "AluOp",
            "controlCodes": {
                "codesDescription": [
                    { "label": "RegDest"  , "bitSize": 1 },
                    { "label": "AluSrc"   , "bitSize": 1 },                    
                    { "label": "AluOp"    , "bitSize": 4 },
                    { "label": "Branch"   , "bitSize": 1 },
                    { "label": "MemRead"  , "bitSize": 1 },
                    { "label": "MemWrite" , "bitSize": 1 },
                    { "label": "RegWrite" , "bitSize": 1 },
                    { "label": "MemToReg" , "bitSize": 1 }
                ],
                "opcodeToControl": {
                    "0":  [1,0,0 ,0,0,0,1,1],
 
                    "4":  [0,0,2 ,1,0,0,0,0],
                    "5":  [0,0,11,1,0,0,0,0],
 
                    "8":  [0,1,1 ,0,0,0,1,1],
                    "9":  [0,1,2 ,0,0,0,1,1],
                    "12": [0,1,3 ,0,0,0,1,1],
                    "13": [0,1,4 ,0,0,0,1,1],
                    "14": [0,1,6 ,0,0,0,1,1],
 
                    "35": [0,1,1 ,0,0,0,1,1],
                    "36": [0,1,1 ,0,0,0,1,1],
                    "37": [0,1,15,0,0,0,1,1],
                    "43": [0,1,1 ,0,0,1,0,1]
                }
            },
            "funcToOperation": [
                {"func": 32, "operation": 1},
                {"func": 36, "operation": 3},
                {"func": 26, "operation": 9},
                {"func": 27, "operation": 10},
                {"func": 24, "operation": 7},
                {"func": 25, "operation": 8},
                {"func": 0,  "operation": 0},
                {"func": 39, "operation": 5},
                {"func": 37, "operation": 4},
                {"func": 1,  "operation": 13},
                {"func": 2,  "operation": 14},
                {"func": 34, "operation": 2},
                {"func": 38, "operation": 6}
            ]
        },       
        { "label": "CU_MUX", 
            "gui": {
               "x": 145,
               "y": 150,
               "width": 5,
               "height": 20
            },
            "type": "ConstMUX", 
            "input": 11, 
            "const": 0,
            "output": 11,
            "selector": { "label": "bubble", "bitSize": 1 },
            "desc": "Activating this MUX results in value of constant output value." 
        },
        { "label": "RTF",
            "gui": {
               "x": 90,
               "y": 110,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 5,
            "out": [
                { "label": "rt", "bitSize": "5" }
            ],
            "desc": "Forks 'rt' part of instruction code."
        },       
        { "label": "REG_BANK",
            "gui": {
               "x": 115,
               "y": 87,
               "width": 30,
               "height": 35
            },
            "type": "RegBank", 
            "dataBitSize": 32,
            "inputA" : { "label": "rs", "bitSize": 5 },
            "inputB" : { "label": "rt", "bitSize": 5 },
            "destReg": { "label": "destReg", "bitSize": 5 },
            "destRegData": "destRegValue",
            "outputA": "reg1Value",
            "outputB": "reg2Value",
            "regCount": 32,
            "selector": { "label": "regWriteSignal", "bitSize": 1 },
            "desc": "Bank of registers of fixed size. Can be used as temporary storage."
        },      
        { "label": "SIGN_EXT", 
            "gui": {
               "x": 135,
               "y": 60,
               "width": 8,
               "height": 15
            },
            "type": "SignExt", 
            "input": 16,
            "output": 32,
            "desc": "Extends the output, from 16 bit to 32 bit in size."
        },
        
        
        
        { "label": "ID_EX", 
            "gui": {
               "x": 160,
               "y": 35,
               "width": 10,
               "height": 130
            },
            "type": "LatchRegister",
            "in": {
                "controlSignals": 32,
                "newAddress": 32,
                "reg1Value": 32,
                "reg2Value": 32,
                "immediateValue": 32,
                "rt": 5,
                "rd": 5
            }, 
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "newAddress": { "newAddress" : "32" },
                "reg1Value": { "aluInputA" : "32" },
                "reg2Value": { "reg2Value" : "32" },
                "immediateValue": { "immediateValue" : "32" },
                "rt": { "rt" : "5" },
                "rd": { "rd" : "5" }
            },
            "desc": "Latch register between Decode and Execute phase"
        },
        { "label": "F1",
            "gui": {
               "x": 180,
               "y": 143,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 11,
            "out": [
                { "label": "controlSignals", "bitSize": "10" },
                { "label": "destRegSignal", "bitSize": "0-10" }
            ]
        },
        { "label": "F2",
            "gui": {
               "x": 198,
               "y": 165,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 10,
            "out": [
                { "label": "controlSignals"  , "bitSize": "9" },
                { "label": "aluSrcSignal"  , "bitSize": "0-9" }
            ]
        },
        { "label": "F3",
            "gui": {
               "x": 216,
               "y": 165,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 9,
            "out":  [
                { "label": "controlSignals"  , "bitSize": "5" },
                { "label": "aluOp"  , "bitSize": "0-5" }
            ]
        },
        { "label": "EX_CU_MUX", 
            "gui": {
               "x": 230,
               "y": 145,
               "width": 5,
               "height": 20
            },
            "type": "ConstMUX",
            "input": 5,
            "const": 0,
            "output": 5,
            "selector": { "label": "bubble", "bitSize": 1 },
            "desc": "MUX that can zero out signals from control unit in EX phase." 
        }, 
        
        { "label": "RVF",
            "gui": {
               "x": 175,
               "y": 78,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 32,
            "out": [
                { "label": "reg2Value"  , "bitSize": "32" }
            ],
            "desc": "Forks  value from second register from Reg Bank. This value is forwarded to AluSrc MUX and to the next latch register."
        },
        { "label": "IVF",
            "gui": {
               "x": 190,
               "y": 72,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 32,
            "out": [
                { "label": "immediateValue"  , "bitSize": "32" }
            ],
            "desc": "Forks immediate value and forwards it to the AluSrc MUX and to the branch adder to compute branch address."
        },
        { "label": "OFFSET_ADDER",
            "gui": {
               "x": 200,
               "y": 110,
               "width": 10,
               "height": 30
            },
            "type": "Adder",
            "inputA": { "label": "newAddress", "bitSize": 32 },
            "inputB": { "label": "immediateValue", "bitSize": 32 },
            "output": 32,
            "desc": "Computes branch address by adding offset from immediate value to the value of next address."
        },
        { "label": "ALUSrc_MUX", 
            "gui": {
               "x": 195,
               "y": 80,
               "width": 5,
               "height": 20
            },
            "type": "MUX",
            "inputA": { "label": "reg2Value", "bitSize": 32 },
            "inputB": { "label": "immediateValue", "bitSize": 32 },
            "output": 32,
            "selector": { "label": "aluSrcSignal", "bitSize": 1 },
            "desc": "Determins the second input into ALU. It could be either output from registers or immediate value." 
        },          
        { "label": "ALU", 
            "gui": {
               "x": 210,
               "y": 65,
               "width": 13,
               "height": 40
            },
            "type": "ALU",
            "inputA": { "label": "aluInputA", "bitSize": 32 },
            "inputB": { "label": "aluInputB", "bitSize": 32 },
            "output": 32,
            "aluOp": { "label": "aluOp", "bitSize": 4 },
            "zeroResult": { "label": "zeroResultSignal", "bitSize": 1 },
            "operations": [
                { "code":  0, "operation":  "add" },
                { "code":  1, "operation":  "add" },
                { "code":  2, "operation":  "sub" },
                { "code":  3, "operation":  "and" },
                { "code":  4, "operation":   "or" },
                { "code":  5, "operation":  "nor" },
                { "code":  6, "operation":  "xor" },
                { "code":  7, "operation":  "mul" },
                { "code":  8, "operation": "mulu" },
                { "code":  9, "operation":  "div" },
                { "code": 10, "operation": "divu" },
                { "code": 11, "operation": "bneq" },
                { "code": 13, "operation": "sllv" },
                { "code": 14, "operation": "srlv" },
                { "code": 15, "operation":  "lui" }
            ]
        },
        { "label": "DEST_REG_MUX", 
            "gui": {
               "x": 175,
               "y": 40,
               "width": 5,
               "height": 20
            },
            "type": "MUX",
            "inputA": { "label": "rt", "bitSize": 5 },
            "inputB": { "label": "rd", "bitSize": 5 },
            "output": 5,
            "selector": { "label": "destRegSignal", "bitSize": 1 },
            "desc": "Chooses destination register (either rd or rt value from instruction)." 
        }, 
        
        
        
        { "label": "EX_MEM",
            "gui": {
               "x": 240,
               "y": 35,
               "width": 10,
               "height": 130
            },
            "type": "LatchRegister",
            "in": {
                "controlSignals": 32,
                "branchAddress": 32,
                "zeroResultSignal": 1,
                "aluResult": 32,
                "reg2Value": 32,
                "destReg": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "branchAddress": { "branchAddress" : "32" },
                "zeroResultSignal": { "zeroResultSignal" : "1" },
                "aluResult": { "aluResult" : "32" },
                "reg2Value": { "reg2Value" : "32" },
                "destReg": { "destReg" : "5" }
            },
            "desc": "Latch register between Execute and Memory phase" 
        },
        { "label": "F4",
            "gui": {
               "x": 257,
               "y": 140,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 5,
            "out": [
                { "label": "controlSignals"  , "bitSize": "4" },
                { "label": "branchSignal"  , "bitSize": "0-4" }
            ]
        },
        { "label": "F5",
            "gui": {
               "x": 275,
               "y": 140,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 4,
            "out": [
                { "label": "controlSignals"  , "bitSize": "3" },
                { "label": "memReadSignal"  , "bitSize": "0-3" }
            ]
        },
        { "label": "F6",
            "gui": {
               "x": 295,
               "y": 140,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 3,
            "out": [
                { "label": "controlSignals"  , "bitSize": "2" },
                { "label": "memWriteSignal"  , "bitSize": "0-2" }
            ]
        },
        { "label": "BRANCH_AND", 
            "gui": {
               "x": 260,
               "y": 110,
               "width": 15,
               "height": 10
            },
            "type": "AND", 
            "inputA": { "label": "branchSignal", "bitSize": 1 },
            "inputB": { "label": "zeroResultSignal", "bitSize": 1 },
            "output": 1,
            "desc": "Output of this AND gate determines, if a branch will be taken or not."
        },
        { "label": "BF",
            "gui": {
               "x": 270,
               "y": 165,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 1,
            "out": [
                { "label": "branchSignal"  , "bitSize": "1" },
                { "label": "bubble"  , "bitSize": "1" }
            ],
            "desc": "Forks branch signal into bubble, to erase all control signals from previous datapath phases."
        },
        { "label": "BF1",
            "gui": {
               "x": 232,
               "y": 165,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 1,
            "out": [
                { "label": "bubble"  , "bitSize": "1" }
            ]
        },
        { "label": "BF2",
            "gui": {
               "x": 145,
               "y": 165,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 1,
            "out": [
                { "label": "bubble"  , "bitSize": "1" }
            ]
        },
        { "label": "ARF",
            "gui": {
               "x": 250,
               "y": 90,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 32,
            "out": [
                { "label": "aluResult"  , "bitSize": "32" }
            ],
            "desc": "Forks result from ALU and forwars it to the data memory and next latch register."
        },
        { "label": "DATA_MEM", 
            "gui": {
               "x": 265,
               "y": 70,
               "width": 20,
               "height": 30
            },
            "type": "DataMemory",
            "bitSize": 32,
            "inputA": "aluResult",
            "inputB": "reg2Value",
            "memRead": { "label": "memReadSignal", "bitSize": 1 },
            "memWrite": { "label": "memWriteSignal", "bitSize": 1 },
            "capacity": 1000,
            "desc": "Saves data, extra CPU storage and typically much bigger in size than register bank."
        },
        
        
        
        { "label": "MEM_WB",
            "gui": {
               "x": 300,
               "y": 35,
               "width": 10,
               "height": 130
            },
            "type": "LatchRegister",
             "in": {
                "controlSignals": 32,
                "memData": 32,
                "aluResult": 32,
                "destReg": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "memData": { "memData" : "32" },
                "aluResult": { "aluResult" : "32" },
                "destReg": { "destReg" : "5" }
            },
            "desc": "Latch register between Memory and WriteBack phase"
        },  
        
        { "label": "F7",
            "gui": {
               "x": 325,
               "y": 140,
               "width": 3,
               "height": 3
            },
            "type": "Fork",
            "in": 2,
            "out": [
                { "label": "regWriteSignal"  , "bitSize": "1" },
                { "label": "memToRegSignal"  , "bitSize": "0-1" }
            ]
        },
        { "label": "WB_MUX", 
            "gui": {
               "x": 320,
               "y": 90,
               "width": 5,
               "height": 20
            },
            "type": "MUX", 
            "inputA": { "label": "memData", "bitSize": 32 },
            "inputB": { "label": "aluResult", "bitSize": 32 },
            "output": 32,
            "selector": { "label": "memToRegSignal", "bitSize": 1 },
            "desc" : "Chooses from memory output or immediate value. Chosen value may be written into a register in next cycle." }
    ],
    
    
    
    
    
    
    "connections": [
        { "from": "PC", "to": "AF", "selector": "address" },
        { "from": "AF", "to": "I_MEM", "selector": "address" },
        { "from": "AF", "to": "CONST_ADDER", "selector": "address" },
        { "from": "CONST_ADDER", "to": "NAF", "selector": "newAddress" },
        { "from": "NAF", "to": "IF_ID", "selector": "newAddress" },
        { "from": "NAF", "to": "BRANCH_MUX", "selector": "newAddress" },
        { "from": "BRANCH_MUX", "to": "PC", "selector": "newAddress" },
        { "from": "I_MEM", "to": "IF_ID", "selector": "iCode" },

        { "from": "IF_ID", "to": "CU", "selector": "iCode" },
        { "from": "IF_ID", "to": "ID_EX", "selector": "newAddress" },
        { "from": "IF_ID", "to": "REG_BANK", "selector": "rs" },
        { "from": "IF_ID", "to": "RTF", "selector": "rt" },
        { "from": "IF_ID", "to": "SIGN_EXT", "selector": "immediateValue" },
        { "from": "IF_ID", "to": "ID_EX", "selector": "rd" },
        
        { "from": "CU", "to": "CU_MUX", "selector": "controlSignals" },
        { "from": "CU_MUX", "to": "ID_EX", "selector": "controlSignals" },
        { "from": "RTF", "to": "REG_BANK", "selector": "rt" },
        { "from": "RTF", "to": "ID_EX", "selector": "rt" },
        { "from": "REG_BANK", "to": "ID_EX", "selector": "reg1Value" },
        { "from": "REG_BANK", "to": "ID_EX", "selector": "reg2Value" },
        { "from": "SIGN_EXT", "to": "ID_EX", "selector": "immediateValue" },
        
        
        
        { "from": "ID_EX", "to": "F1", "selector": "controlSignals" },
        { "from": "ID_EX", "to": "OFFSET_ADDER", "selector": "newAddress" },
        { "from": "ID_EX", "to": "IVF", "selector": "immediateValue" },
        { "from": "ID_EX", "to": "ALU", "selector": "aluInputA" },
        { "from": "ID_EX", "to": "RVF", "selector": "reg2Value" },
        { "from": "ID_EX", "to": "DEST_REG_MUX", "selector": "rt" },
        { "from": "ID_EX", "to": "DEST_REG_MUX", "selector": "rd" },
        
        { "from": "DEST_REG_MUX", "to": "EX_MEM", "selector": "destReg" },

        { "from": "F1", "to": "F2", "selector": "controlSignals" },
        { "from": "F1", "to": "DEST_REG_MUX", "selector": "destRegSignal" },
        { "from": "F2", "to": "F3", "selector": "controlSignals" },
        { "from": "F2", "to": "ALUSrc_MUX", "selector": "aluSrcSignal" },
        { "from": "F3", "to": "EX_CU_MUX", "selector": "controlSignals" },
        { "from": "F3", "to": "ALU", "selector": "aluOp" },
        { "from": "EX_CU_MUX", "to": "EX_MEM", "selector": "controlSignals" },
          
        { "from": "RVF", "to": "ALUSrc_MUX", "selector": "reg2Value" },
        { "from": "RVF", "to": "EX_MEM", "selector": "reg2Value" },
        { "from": "IVF", "to": "OFFSET_ADDER", "selector": "immediateValue" },
        { "from": "IVF", "to": "ALUSrc_MUX", "selector": "immediateValue" },
        { "from": "OFFSET_ADDER", "to": "EX_MEM", "selector": "branchAddress" },
        
        { "from": "ALUSrc_MUX", "to": "ALU", "selector": "aluInputB" },
        { "from": "ALU", "to": "EX_MEM", "selector": "aluResult" },
        { "from": "ALU", "to": "EX_MEM", "selector": "zeroResultSignal" },

        
        
        { "from": "EX_MEM", "to": "F4", "selector": "controlSignals" },
        { "from": "EX_MEM", "to": "BRANCH_AND", "selector": "zeroResultSignal" },
        { "from": "EX_MEM", "to": "BRANCH_MUX", "selector": "branchAddress" },
        { "from": "EX_MEM", "to": "ARF", "selector": "aluResult" },
        { "from": "EX_MEM", "to": "DATA_MEM", "selector": "reg2Value" },
        { "from": "EX_MEM", "to": "MEM_WB", "selector": "destReg" },
        
        { "from": "F4", "to": "F5", "selector": "controlSignals" },
        { "from": "F4", "to": "BRANCH_AND", "selector": "branchSignal" },
        { "from": "F5", "to": "F6", "selector": "controlSignals" },
        { "from": "F5", "to": "DATA_MEM", "selector": "memReadSignal" },
        { "from": "F6", "to": "MEM_WB", "selector": "controlSignals" },
        { "from": "F6", "to": "DATA_MEM", "selector": "memWriteSignal" },
        
        { "from": "BRANCH_AND", "to": "BF", "selector": "branchSignal" },
        { "from": "BF", "to": "BRANCH_MUX", "selector": "branchSignal" },
        { "from": "BF", "to": "BF1", "selector": "bubble" },
        { "from": "BF1", "to": "BF2", "selector": "bubble" },
        { "from": "BF1", "to": "EX_CU_MUX", "selector": "bubble" },
        { "from": "BF2", "to": "CU_MUX", "selector": "bubble" },
        { "from": "BF2", "to": "IF_ID", "selector": "bubble" },
        
        { "from": "ARF", "to": "DATA_MEM", "selector": "aluResult" },
        { "from": "ARF", "to": "MEM_WB", "selector": "aluResult" },
        { "from": "DATA_MEM", "to": "MEM_WB", "selector": "memData" },
        
        
        { "from": "MEM_WB", "to": "F7", "selector": "controlSignals" },
        { "from": "MEM_WB", "to": "WB_MUX", "selector": "memData" },
        { "from": "MEM_WB", "to": "WB_MUX", "selector": "aluResult" },
        { "from": "MEM_WB", "to": "REG_BANK", "selector": "destReg" },
        
        { "from": "F7", "to": "WB_MUX", "selector": "memToRegSignal" },
        { "from": "F7", "to": "REG_BANK", "selector": "regWriteSignal" },
        { "from": "WB_MUX", "to": "REG_BANK", "selector": "destRegValue" }
    ]
}