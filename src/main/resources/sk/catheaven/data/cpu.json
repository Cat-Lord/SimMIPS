{
    "components" : {
        "BRANCH_MUX" :{ 
            "type": "MUX", 
            "inputA": { "label": "newAddress", "bitSize": 32 },
            "inputB": { "label": "branchAddress", "bitSize": 32 },
            "output": 32,
            "selector": { "label": "branchSignal", "bitSize": 1 },
            "desc": "Chooses from next address or calculated address in case of branching."
        },

        "PC":{ 
            "type": "PC",
            "input": { "label": "newAddress", "bitSize": 32 },
            "output": 32,
            "desc": "Adds 4 to the value of input A." 
        },

        "AF": {
            "type": "Fork",
            "in": 32,
            "out": {
                "address": "32",
                "address": "32"
            },
            "desc": "Forks address from PC."
        },

        "CONST_ADDER" :{ 
            "type": "ConstAdder", 
            "input": { "label": "address", "bitSize": 32 },
            "output": 32,
            "const": 4,  
            "desc": "Adds 4 to the value of input A."
        },
        
        "NAF": {
            "type": "Fork",
            "in": 32,
            "out": {
                "newAddress": "32",
                "newAddress": "32"
            },
            "desc": "Forks new address from constAdder to branch and latch register."
        },
        
        "I_MEM" :{ "type": "InstructionMemory" },
        
        "IF_ID"  :{
            "type": "LatchRegister",
            "in": {
                "newAddress": 32,
                "iCode": 32
            },
            "out": {
                "newAddress": { "newAdress" : "32" },
                "iCode": {
                    "rs" : "6-27",
                    "rt" : "11-27",
                    "rd" : "16-27",
                    "imm": "16-16"
                }
            },
            "desc": "Latch register between Fetch and Decode phase" },
        "ID_EX"  :{ 
            "type": "LatchRegister",
            "in": {
                "controlSignals": 32,
                "newAddress": 32,
                "reg1Value": 32,
                "reg2Value": 32,
                "immediate": 32,
                "rt": 5,
                "rd": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "newAddress": { "newAdress" : "32" },
                "reg1Value": { "aluInputA" : "32" },
                "reg2Value": { "reg2Value" : "32" },
                "immediate": { "immediate" : "32" },
                "rt": { "rt" : "5" },
                "rd": { "rd" : "5" }
            },
            
            "desc": "Latch register between Decode and Execute phase"
        },
        "EX_MEM" :{
            "type": "LatchRegister",
            "in": {
                "controlSignals": 32,
                "branchAddress": 32,
                "zeroResultSignal": 1,
                "aluResult": 32,
                "reg2Value": 32,
                "destReg": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "branchAddress": { "branchAddress" : "32" },
                "zeroResultSignal": { "zeroResultSignal" : "1" },
                "aluResult": { "aluResult" : "32" },
                "reg2Value": { "reg2Value" : "32" },
                "destReg": { "destReg" : "5" }
            },
            "desc": "Latch register between Execute and Memory phase" 
        },
        "MEM_WB" :{
            "type": "LatchRegister",
             "in": {
                "controlSignals": 32,
                "memData": 32,
                "aluResult": 32,
                "destReg": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "memData": { "memData" : "32" },
                "aluResult": { "aluResult" : "32" },
                "destReg": { "destReg" : "5" }
            },
            "desc": "Latch register between Memory and WriteBack phase"
        },
        
        "RTF": {
            "type": "Fork",
            "in": 5,
            "out": {
                "rt": "5",
                "rt": "5"
            },
            "desc": "Forks 'rt' part of instruction code."
        },
        
        "CU" :{
            "type": "ControlUnit",
            "in" : 32,
            "opCodeCut": "0-26",
            "funcCut": "27-27",
            "funcDependant": "AluOp",
            "controlCodes": {
                "codesDescription": [
                    { "label": "RegDest"  , "bitSize": 1 },
                    { "label": "AluSrc"   , "bitSize": 1 },                    
                    { "label": "AluOp"    , "bitSize": 4 },
                    { "label": "Branch"   , "bitSize": 1 },
                    { "label": "MemRead"  , "bitSize": 1 },
                    { "label": "MemWrite" , "bitSize": 1 },
                    { "label": "RegWrite" , "bitSize": 1 },
                    { "label": "MemToReg" , "bitSize": 1 }
                ],
                "opcodeToControl": {
                    "0":  [1,0,0 ,0,0,0,1,1],
 
                    "4":  [0,0,2 ,1,0,0,0,0],
                    "5":  [0,0,11,1,0,0,0,0],
 
                    "8":  [0,1,1 ,0,0,0,1,1],
                    "9":  [0,1,2 ,0,0,0,1,1],
                    "12": [0,1,3 ,0,0,0,1,1],
                    "13": [0,1,4 ,0,0,0,1,1],
                    "14": [0,1,6 ,0,0,0,1,1],
 
                    "35": [0,1,1 ,0,0,0,1,1],
                    "36": [0,1,1 ,0,0,0,1,1],
                    "37": [0,1,15,0,0,0,1,1],
                    "43": [0,1,1 ,0,0,1,0,1]
                }
            },
            "funcToOperation": [
                {"func": 32, "operation": 1},
                {"func": 36, "operation": 3},
                {"func": 26, "operation": 9},
                {"func": 27, "operation": 10},
                {"func": 24, "operation": 7},
                {"func": 25, "operation": 8},
                {"func": 0,  "operation": 0},
                {"func": 39, "operation": 5},
                {"func": 37, "operation": 4},
                {"func": 1,  "operation": 13},
                {"func": 2,  "operation": 14},
                {"func": 34, "operation": 2},
                {"func": 38, "operation": 6}
            ]
        },
        
        "CU_MUX" :{ 
            "type": "ConstMUX", 
            "input": 11, 
            "const": 0,
            "output": 11,
            "selector": { "label": "bubble", "bitSize": 1 },
            "desc": "Activating this MUX results in value of constant output value." 
        },
        
        "REG_BANK" :{ "type": "RegBank", "regCount": 32 },
        
        "SIGN_EXT" :{ 
            "type": "SignExt", 
            "input": 16,
            "output": 32,
            "desc": "Extends the output, from 16 bit to 32 bit in size."
        },
                
        "F1": {
            "type": "Fork",
            "in": 11,
            "out": {
                "controlSignals": "10",
                "destRegSignal": "0-10"
            }
        },
        "F2": {
            "type": "Fork",
            "in": 10,
            "out": {
                "controlSignals": "9",
                "aluSrcSignal": "0-9"
            }
        },
        "F3": {
            "type": "Fork",
            "in": 9,
            "out": {
                "controlSignals": "5",
                "aluOp": "0-5"
            }
        },
        "F4": {
            "type": "Fork",
            "in": 5,
            "out": {
                "controlSignals": "4",
                "branchSignal": "0-1"
            }
        },
        "F5": {
            "type": "Fork",
            "in": 4,
            "out": {
                "controlSignals": "3",
                "memRead": "0-1"
            }
        },
        "F6": {
            "type": "Fork",
            "in": 3,
            "out": {
                "controlSignals": "2",
                "memWrite": "0-1"
            }
        },
        "F6": {
            "type": "Fork",
            "in": 2,
            "out": {
                "regWriteSignal": "1",
                "memToRegSignal": "0-1"
            }
        },
        "BF": {
            "type": "Fork",
            "in": 1,
            "out": {
                "branchSignal": "1",
                "bubble": "1"
            },
            "desc": "Forks branch signal into bubble, to erase all control signals from previous datapath phases."
        },
        "BF1": {
            "type": "Fork",
            "in": 1,
            "out": {
                "bubble": "1",
                "bubble": "1"
            }
        },
        "BF2": {
            "type": "Fork",
            "in": 1,
            "out": {
                "bubble": "1",
                "bubble": "1"
            }
        },

        "EX_CU_MUX" :{ 
            "type": "ConstMUX",
            "input": 5,
            "const": 0,
            "output": 5,
            "selector": { "label": "bubble", "bitSize": 1 },
            "desc": "MUX that can zero out signals from control unit in EX phase." 
        },
        
        "DEST_REG_MUX":{ 
            "type": "MUX",
            "inputA": { "label": "rt", "bitSize": 5 },
            "inputB": { "label": "rs", "bitSize": 5 },
            "output": 5,
            "selector": {
                "label": "destRegSignal",
                "bitSize": 1
            },
            "desc": "Chooses destination register (either rd or rt value from instruction)." 
        },
        
        "ADDER" :{ "type": "Adder" },
            
        "ALU" :{ 
            "type": "ALU",
              
            "out": { "output": 32 },
            "aluOp": 4,
            "zeroResultSignal": 1,
            "operations": [
                { "code":  1, "operation":  "add" },
                { "code":  2, "operation":  "sub" },
                { "code":  3, "operation":  "and" },
                { "code":  4, "operation":   "or" },
                { "code":  5, "operation":  "nor" },
                { "code":  6, "operation":  "xor" },
                { "code":  7, "operation":  "mul" },
                { "code":  8, "operation": "mulu" },
                { "code":  9, "operation":  "div" },
                { "code": 10, "operation": "divu" },
                { "code": 11, "operation": "bneq" },
                { "code": 13, "operation": "sllv" },
                { "code": 14, "operation": "srlv" },
                { "code": 15, "operation":  "lui" }
            ]
        }, 
        
        "RVF": {
            "type": "Fork",
            "in": 32,
            "out": {
                "reg2Value": "32",
                "reg2Value": "32"
            },
            "desc": "Forks  value from second register from Reg Bank. This value is forwarded to AluSrc MUX and to the next latch register."
        },
        "IVF": {
            "type": "Fork",
            "in": 32,
            "out": {
                "immediateValue": "32",
                "immediateValue": "32"
            },
            "desc": "Forks immediate value and forwards it to the AluSrc MUX and to the branch adder to compute branch address."
        },
        
        "ALUSrc" :{ 
            "type": "MUX",
            "inputA": { "label": "immediateValue", "bitSize": 32 },
            "inputB": { "label": "reg2Value", "bitSize": 32 },
            "output": 32,
            "selector": {
                "label": "aluSrcSignal",
                "bitSize": 1
            },
            "desc": "Determins the second input into ALU. It could be either output from registers or immediate value." 
        },
        
        "BRANCH_AND"  :{ "type": "AND", "inputA": 1, "inputB": 1, "output": 1, "desc": "Output of this AND gate determines, if a branch will be taken or not."},
        
        "ARF": {
            "type": "Fork",
            "in": 32,
            "out": {
                "immediateValue": "32",
                "immediateValue": "32"
            },
            "desc": "Forks result from ALU and forwars it to the data memory and next latch register."
        },
        
        "DATA_MEM" :{ 
            "type": "DataMemory",
            "capacity": 1000,
            "desc": "Saves data, extra CPU storage and typically much bigger in size than register bank."
        },

        "WB_MUX" :{ 
            "type": "MUX", 
            "inputA": { "label": "memData", "bitSize": 32 },
            "inputB": { "label": "aluResult", "bitSize": 32 },
            "output": 32,
            "selector": {
                "label": "memToRegSignal",
                "bitSize": 1
            },
            "desc" : "Chooses from memory output or immediate value. Chosen value may be written into a register in next cycle." }
    },
    
    "connections": {
        
    }
}