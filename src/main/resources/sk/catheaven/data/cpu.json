{
    "components" : {
        "BRANCH_MUX" :{"type": "MUX", "inputA": 32, "inputB": 32, "output": 32, "desc": "Chooses from next address or calculated address in case of branching." },

        "PC":{ "type": "PC", "inputA": 32, "output": 32, "desc": "Adds 4 to the value of input A." },

        "CONST_ADDER" :{ "type": "ConstAdder", "inputA": 32, "const" : 4, "output": 32, "desc": "Adds 4 to the value of input A." },
        
        "I_MEM" :{ "type": "InstructionMemory" },
        
        "IF_ID" :{
            "type": "LatchRegister",
            "in": {
                "newAddress": 32,
                "iCode": 32
            },
            "out": {
                "newAddress": { "newAdress" : "32" },
                "iCode": {
                    "rs" : "6-27",
                    "rt" : "11-27",
                    "rd" : "16-28",
                    "imm": "16-16"
                }
            },
            "desc": "Latch register between Fetch and Decode phase" },

        "CU" :{
            "type": "ControlUnit",
            "controlCodes": {
                "codesDescription": {
                    "AluOp" :   { "bitSize": 4 },
                    "RegDest":  { "bitSize": 1 },
                    "AluSrc":   { "bitSize": 1 },
                    "MemRead":  { "bitSize": 1 },
                    "MemWrite": { "bitSize": 1 },
                    "Branch":   { "bitSize": 1 },
                    "MemToReg": { "bitSize": 1 },
                    "RegWrite": { "bitSize": 1 }
                },
                "opcodeToControl": {
                    "0":  [0,1,0,0,0,0,1,1],

                    "4":  [2,0,0,0,0,1,0,0],
                    "5":  [11,0,0,0,0,1,0,0],

                    "8":  [1,0,1,0,0,0,1,1],
                    "9":  [2,0,1,0,0,0,1,1],
                    "12": [3,0,1,0,0,0,1,1],
                    "13": [4,0,1,0,0,0,1,1],
                    "14": [6,0,1,0,0,0,1,1],

                    "35": [1,0,1,0,0,0,1,1],
                    "36": [1,0,1,0,0,0,1,1],
                    "37": [15,0,1,0,0,0,1,1],
                    "43": [1,0,1,0,1,0,1,0]
                }
            },
            "funcToOperation": [
                {"func": 32, "operation": 1},
                {"func": 36, "operation": 3},
                {"func": 26, "operation": 9},
                {"func": 27, "operation": 10},
                {"func": 24, "operation": 7},
                {"func": 25, "operation": 8},
                {"func": 0, "operation": 0},
                {"func": 39, "operation": 5},
                {"func": 37, "operation": 4},
                {"func": 1, "operation": 13},
                {"func": 2, "operation": 14},
                {"func": 34, "operation": 2},
                {"func": 38, "operation": 6}
            ]
        },
        "CU_MUX"      :{ "type": "ConstMUX", "inputA": 32, "const": 0, "output": 32, "desc": "Activating this MUX results in value of constant output value." }, 
        "REG_BANK"    :{ "type": "RegBank", "regCount": 32 },
        "SIGN_EXT"    :{ "type": "SignExt", "input": 16, "output": 32, "desc": "Extends the output, from 16 bit to 32 bit in size." },
        "ID_EX" :{ 
            "type": "LatchRegister",
            "in": {
                "controlSignals": 32,
                "newAddress": 32,
                "reg1Value": 32,
                "reg2Value": 32,
                "immediate": 32,
                "rt": 5,
                "rd": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "newAddress": { "newAdress" : "32" },
                "reg1Value": { "aluInputA" : "32" },
                "reg2Value": { "reg2Value" : "32" },
                "immediate": { "immediate" : "32" },
                "rt": { "rt" : "5" },
                "rd": { "rd" : "5" }
            },
            
            "desc": "Latch register between Decode and Execute phase" },

        "EX_CU_MUX" :{ "type": "ConstMUX", "desc": "MUX that can zero out signals from control unit in EX phase." },
        "DEST_REG_MUX":{ "type": "MUX", "desc": "Chooses destination register (either rd or rt value from instruction)." },
        "ADDER"       :{ "type": "Adder" },
            
        "ALU" :{ 
            "type": "ALU",
            "inputA": 32, "inputB": 32, "output": 32,
            "operations": [
                   { "code":  1, "operation":  "add" },
                   { "code":  2, "operation":  "sub" },
                   { "code":  3, "operation":  "and" },
                   { "code":  4, "operation":   "or" },
                   { "code":  5, "operation":  "nor" },
                   { "code":  6, "operation":  "xor" },
                   { "code":  7, "operation":  "mul" },
                   { "code":  8, "operation": "mulu" },
                   { "code":  9, "operation":  "div" },
                   { "code": 10, "operation": "divu" },
                   { "code": 11, "operation": "bneq" },
                   { "code": 13, "operation": "sllv" },
                   { "code": 14, "operation": "srlv" },
                   { "code": 15, "operation":  "lui" }
            ]
        },
        
        
        "ALUSrc"      :{ "type": "MUX", "inputA": 32, "inputB": 32, "output": 32, "desc": "Determins the second input into ALU. It could be either output from registers or immediate value." },
        "EX_MEM" :{
            "type": "LatchRegister",
            "in": {
                "controlSignals": 32,
                "branchAddress": 32,
                "zeroResultSignal": 1,
                "aluResult": 32,
                "reg2Value": 32,
                "destReg": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "branchAddress": { "branchAddress" : "32" },
                "zeroResultSignal": { "zeroResultSignal" : "1" },
                "aluResult": { "aluResult" : "32" },
                "reg2Value": { "reg2Value" : "32" },
                "destReg": { "destReg" : "5" }
            },
            "desc": "Latch register between Execute and Memory phase" 
        },

        "BRANCH_AND"  :{ "type": "AND", "inputA": 1, "inputB": 1, "output": 1, "desc": "Output of this AND gate determines, if a branch will be taken or not."},
        "DATA_MEM"    :{ "type": "DataMemory"},

        "MEM_WB" :{
            "type": "LatchRegister" , 
             "in": {
                "controlSignals": 32,
                "memData": 32,
                "aluResult": 32,
                "destReg": 5
            },
            
            "out": {
                "controlSignals": { "controlSignals" : "32" },
                "memData": { "memData" : "32" },
                "aluResult": { "aluResult" : "32" },
                "destReg": { "destReg" : "5" }
            },
            "desc": "Latch register between Memory and WriteBack phase"
        },
        "WB_MUX"      :{ "type": "MUX", "inputA": 32, "inputB": 32, "output": 32, "desc" : "Chooses from memory output or immediate value. Chosen value may be written into a register in next cycle." }
    },
    
    "connections": {
        
    }
}
